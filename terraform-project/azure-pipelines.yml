trigger:
  branches:
    include:
      - none

pool:
  vmImage: 'ubuntu-latest'

variables:
  resourceGroupName: 'my-resource-group'      # Your AKS resource group
  aksClusterName: 'my-aks-cluster'            # Your AKS cluster name
  kubernetesNamespace: 'default'              # Namespace for deployment

steps:
# Step 1: Install Terraform
- task: TerraformInstaller@0
  inputs:
    terraformVersion: '1.5.0'

# Step 2: Initialize Terraform with backend configuration
- task: TerraformTaskV2@2
  inputs:
    command: 'init'
    backendServiceArm: 'Crayon-Conn'
    backendAzureRmResourceGroupName: 'myStorageResourceGroup'
    backendAzureRmStorageAccountName: 'terracount020304'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraform-manifest.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-project'

# Step 3: Run Terraform Plan
- task: TerraformTaskV2@2
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-project'
    environmentServiceNameAzureRM: 'Crayon-Conn'
    commandOptions: '-var-file=env/dev.tfvars -out=tfplan'

# Step 4: Apply Terraform changes
- task: TerraformTaskV2@2
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-project'
    environmentServiceNameAzureRM: 'Crayon-Conn'
    commandOptions: '-auto-approve tfplan'

# Step 5: Install kubectl
- task: KubectlInstaller@0
  inputs:
    kubectlVersion: 'latest'

# Step 6: Get AKS admin credentials (bypasses AAD)
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Crayon-Conn'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --admin --overwrite-existing

# Step 7: Assign cluster-admin role to AAD user
- script: |
    kubectl create clusterrolebinding shailender-cluster-admin-binding \
      --clusterrole=cluster-admin \
      --user=adm-shailender@crayonuk.tech || echo "Role binding may already exist"
  displayName: 'Assign Cluster Admin Role to AAD User'

# Step 8: Deploy NGINX service to AKS
- script: |
    kubectl apply -f terraform-project/manifests/nginx-deployment.yaml --namespace $(kubernetesNamespace)
  displayName: 'Deploy NGINX to AKS'

# Step 9: Deploy Voting App to AKS
- script: |
    kubectl apply -f terraform-project/manifests/voting-app.yaml --namespace $(kubernetesNamespace)
  displayName: 'Deploy Voting App to AKS'