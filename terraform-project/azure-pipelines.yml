trigger:
  branches:
    include:
      - main  # This pipeline triggers on changes to the 'main' branch

pool:
  vmImage: 'ubuntu-latest'  # Using the latest Ubuntu image for the pipeline

steps:
# Step 1: Install Terraform (if not installed)
- task: TerraformInstaller@0
  inputs:
    terraformVersion: '1.5.0'  # Specify the version of Terraform you want to use

# Step 2: Initialize Terraform with backend configuration
- task: TerraformTaskV2@2
  inputs:
    command: 'init'  # Initialize Terraform
    backendServiceArm: 'Shail-Conn'  # Azure service connection for authentication
    backendAzureRmResourceGroupName: 'myStorageResourceGroup'  # Resource group for backend
    backendAzureRmStorageAccountName: 'terracount02'  # Storage account name
    backendAzureRmContainerName: 'tfstate'  # Container for state file
    backendAzureRmKey: 'terraform.tfstate'  # Name of the state file
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-project'  # Ensure this points to where your Terraform configs are

# Step 3: Run Terraform Plan
- task: TerraformTaskV2@2
  inputs:
    command: 'plan'  # Generate a Terraform execution plan
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-project'  # Ensure this points to where your Terraform configs are
    environmentServiceNameAzureRM: 'Shail-Conn'  # Azure service connection for authentication
    commandOptions: '-var-file=env/dev.tfvars -out=tfplan'  # Ensure this points to the correct path of your .tfvars file inside the env folder

# Step 4: Apply Terraform changes
- task: TerraformTaskV2@2
  inputs:
    command: 'apply'  # Apply the Terraform plan
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-project'  # Ensure this points to where your Terraform configs are
    environmentServiceNameAzureRM: 'Shail-Conn'  # Azure service connection for authentication
    commandOptions: '-auto-approve tfplan'  # Automatically approve and apply the saved plan
