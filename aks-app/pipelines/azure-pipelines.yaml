trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Link to the variable group containing the sensitive credentials and other necessary variables
variables:
- group: AKS-Credentials   # Replace with the actual name of your variable group

stages:
- stage: BuildAndDeploy
  displayName: 'Build, Push, and Deploy to AKS'
  jobs:
  - job: BuildAndPush
    displayName: 'Build Docker image, push to ACR, and deploy to AKS'
    steps:
    - checkout: self

    - script: |
        # Log in to Azure and ACR using credentials from the variable group
        az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
        az acr login --name $(acrName)

        # Build and push the Docker image
        docker build -f aks-app/docker/Dockerfile -t $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId) aks-app
        docker push $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId)
      displayName: 'Build and Push Docker Image'

    - script: |
        # Install kubelogin to authenticate with AAD-enabled AKS
        az aks install-cli
        
        # Get AKS credentials for kubectl access
        az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --admin

        # Update the Kubernetes deployment file with the new image
        sed -i 's|<image-placeholder>|$(acrName).azurecr.io/$(imageRepository):$(Build.BuildId)|g' aks-app/manifests/k8s-deployment.yaml
        
        # Deploy the updated manifest to AKS
        kubectl apply -f aks-app/manifests/k8s-deployment.yaml
      displayName: 'Deploy to AKS'
      condition: succeeded()
