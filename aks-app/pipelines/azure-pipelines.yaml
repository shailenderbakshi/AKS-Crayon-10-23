trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Link to the variable group containing the sensitive credentials, including acrName
variables:
- group: AKS-Credentials  # Assuming your variable group is still called AKS-Credentials

stages:
- stage: Build
  displayName: 'Build and Push to ACR'
  jobs:
  - job: BuildAndPush
    displayName: 'Build Docker image and push to ACR'
    steps:
    - checkout: self  # Ensure the code is checked out at the start

    - script: |
        # Confirm the working directory and its contents
        echo "Working directory:"
        pwd
        echo "Contents of the current directory:"
        ls -al

        # Log in to Azure and ACR using credentials from the variable group
        az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
        az acr login --name $(acrName)

        # Set the build context to aks-app so Dockerfile can find src correctly
        docker build -f aks-app/docker/Dockerfile -t $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId) aks-app

        # Verify that the image exists locally
        echo "Listing Docker images to confirm tagging"
        docker images | grep $(imageRepository)
      displayName: 'Build Docker Image'

    - script: |
        docker login $(acrName).azurecr.io -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET)
        docker push $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId)
      displayName: 'Push Docker Image to ACR'
      condition: succeeded()
