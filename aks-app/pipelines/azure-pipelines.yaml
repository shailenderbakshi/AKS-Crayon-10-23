trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  acrName: 'notts01'                   # Name of your Azure Container Registry
  aksResourceGroup: 'my-resource-group' # Resource group where your AKS cluster is located
  aksClusterName: 'my-aks-cluster'     # Name of your AKS cluster
  imageRepository: 'aks-app'                    # Name of the repository in ACR for your app image

stages:
- stage: Build
  displayName: 'Build and Push to ACR'
  jobs:
  - job: BuildAndPush
    displayName: 'Build Docker image and push to ACR'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'Crayon-Conn'  # Replace with your Azure Resource Manager service connection for ACR
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: 'docker/Dockerfile'
        tags: $(Build.BuildId)

- stage: Deploy
  displayName: 'Deploy to AKS'
  jobs:
  - job: DeployToAKS
    displayName: 'Deploy app to AKS'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Crayon-Conn' # Replace with the same service connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials"
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName)
          
          echo "Updating image in Kubernetes manifest"
          kubectl set image deployment/aks-app aks-app=$(acrName).azurecr.io/$(imageRepository):$(Build.BuildId) --record
          
          echo "Applying Kubernetes manifest"
          kubectl apply -f manifests/k8s-deployment.yaml
