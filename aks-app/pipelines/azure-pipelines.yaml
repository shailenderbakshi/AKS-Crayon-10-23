trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  acrName: 'notts01'                    # Replace with your actual ACR name
  imageRepository: 'aks-app'            # Name of the repository in ACR
  clientId: 'a8594772-7771-44e6-b951-196a1f362afd'       # Service Principal Client ID
  clientSecret: 'kuk8Q~j9A-Jxr6KuBRuwYURM4v2UktscYwEKKaLS' # Service Principal Client Secret
  tenantId: '08cca906-e7b9-4edf-b88a-37c7efbc1422'       # Tenant ID for the Service Principal
  aksResourceGroup: 'my-resource-group'          # Replace with your AKS resource group name
  aksClusterName: 'my-aks-cluster'              # Replace with your AKS cluster name

stages:
- stage: BuildAndDeploy
  displayName: 'Build, Push, and Deploy to AKS'
  jobs:
  - job: BuildAndPush
    displayName: 'Build Docker image, push to ACR, and deploy to AKS'
    steps:
    - checkout: self

    - script: |
        # Log in to Azure and ACR
        az login --service-principal -u $(clientId) -p $(clientSecret) --tenant $(tenantId)
        az acr login --name $(acrName)

        # Build and push the Docker image
        docker build -f aks-app/docker/Dockerfile -t $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId) aks-app
        docker push $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId)
      displayName: 'Build and Push Docker Image'
      env:
        clientId: $(clientId)
        clientSecret: $(clientSecret)
        tenantId: $(tenantId)

    - script: |
        # Install kubelogin to authenticate with AAD-enabled AKS
        az aks install-cli
        
        # Get AKS credentials for kubectl access
        az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --admin

        # Update the Kubernetes deployment file with the new image
        sed -i 's|<image-placeholder>|$(acrName).azurecr.io/$(imageRepository):$(Build.BuildId)|g' aks-app/manifests/k8s-deployment.yaml
        
        # Deploy the updated manifest to AKS
        kubectl apply -f aks-app/manifests/k8s-deployment.yaml
      displayName: 'Deploy to AKS'
      condition: succeeded()
