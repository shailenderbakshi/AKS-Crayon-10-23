trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  acrName: 'notts01'                    # Replace with your actual ACR name
  imageRepository: 'aks-app'            # Name of the repository in ACR
  clientId: 'a8594772-7771-44e6-b951-196a1f362afd'       # Service Principal Client ID
  clientSecret: 'kuk8Q~j9A-Jxr6KuBRuwYURM4v2UktscYwEKKaLS' # Service Principal Client Secret
  tenantId: '08cca906-e7b9-4edf-b88a-37c7efbc1422'       # Tenant ID for the Service Principal

stages:
- stage: Build
  displayName: 'Build and Push to ACR'
  jobs:
  - job: BuildAndPush
    displayName: 'Build Docker image and push to ACR'
    steps:
    - checkout: self  # Ensure the code is checked out at the start

    - script: |
        # Confirm the working directory and its contents
        echo "Working directory:"
        pwd
        echo "Contents of the current directory:"
        ls -al

        # Log in to Azure and ACR
        az login --service-principal -u $(clientId) -p $(clientSecret) --tenant $(tenantId)
        az acr login --name $(acrName)

        # Build the Docker image from the /aks-app/src directory
        docker build -f aks-app/docker/Dockerfile -t $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId) aks-app/src

        # Verify that the image exists locally
        echo "Listing Docker images to confirm tagging"
        docker images | grep $(imageRepository)
      displayName: 'Build Docker Image'
      env:
        clientId: $(clientId)
        clientSecret: $(clientSecret)
        tenantId: $(tenantId)

    - script: |
        docker login $(acrName).azurecr.io -u $(clientId) -p $(clientSecret)
        docker push $(acrName).azurecr.io/$(imageRepository):$(Build.BuildId)
      displayName: 'Push Docker Image to ACR'
      condition: succeeded()  # Only push if the build step succeeds
