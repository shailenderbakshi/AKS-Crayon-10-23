name: AKS with Manifest Deployment

on:
  push:
    branches:
      - withKubectlManifest

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    env:
      resourceGroupName: manifest-resource-group
      aksClusterName: my-aks-cluster-dev
      kubernetesNamespace: default

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      # Step 3: Verify Subscription
      - name: Verify Subscription
        run: az account show

      # Step 4: Setup Terraform with the latest version available
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Step 5: Terraform Init
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=myStorageResourceGroup" \
          -backend-config="storage_account_name=terracount0203" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=mani-aks-terraform.tfstate"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
        working-directory: terraform-project

      # Step 6: Terraform Apply
      - name: Terraform Apply
        run: |
          terraform apply -var-file=env/dev.tfvars --auto-approve 
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
        working-directory: terraform-project

      # Step 7: Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Step 8: Get AKS admin credentials (bypasses AAD)
      - name: Get AKS Credentials
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az aks get-credentials --resource-group ${{ env.resourceGroupName }} --name ${{ env.aksClusterName }} --admin --overwrite-existing

      # Step 9: Assign cluster-admin role to AAD user
      - name: Assign Cluster Admin Role
        run: |
          kubectl create clusterrolebinding shailender-cluster-admin-binding \
            --clusterrole=cluster-admin \
            --user=adm-shailender@crayonuk.tech || echo "Role binding may already exist"

      # Step 10: Deploy NGINX service to AKS
      - name: Deploy NGINX to AKS
        run: |
          kubectl apply -f terraform-project/manifests/nginx-deployment.yaml --namespace ${{ env.kubernetesNamespace }}

      # Step 11: Deploy Voting App to AKS
      - name: Deploy Voting App to AKS
        run: |
          kubectl apply -f terraform-project/manifests/voting-app.yaml --namespace ${{ env.kubernetesNamespace }}
